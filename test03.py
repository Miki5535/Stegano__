import cv2
import numpy as np
from PIL import Image
import numpy as np
from scipy.signal import convolve2d
import struct
import zlib 



def hide_message_edge_detection_pil(image_path, message, output_path):
    """‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ PIL"""
    img = Image.open(image_path).convert('RGB')
    img_array = np.array(img)
    
    gray_img = img.convert('L')
    gray_array = np.array(gray_img)
    
    def sobel_edges(gray):
        sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
        sobel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])
        grad_x = np.abs(convolve2d(gray, sobel_x, mode='same'))
        grad_y = np.abs(convolve2d(gray, sobel_y, mode='same'))
        edges = np.sqrt(grad_x**2 + grad_y**2)
        threshold = 30
        return edges > threshold
    
    def prepare_message(message):
        # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô UTF-8
        message_bytes = message.encode('utf-8')
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì checksum
        checksum = zlib.crc32(message_bytes) & 0xFFFFFFFF
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (4 bytes) + checksum (4 bytes)
        header = struct.pack('>II', len(message_bytes), checksum)
        # ‡∏£‡∏ß‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        full_data = header + message_bytes
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô binary string
        return ''.join(format(b, '08b') for b in full_data)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö
    edges = sobel_edges(gray_array)
    edge_pixels = np.count_nonzero(edges)
    print(f"üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {edge_pixels}")
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    binary_message = prepare_message(message)
    total_bits = len(binary_message)
    print(f"üìè ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏ß‡∏° header): {total_bits}")
    
    if total_bits > edge_pixels:
        raise ValueError(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ! (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {total_bits} bits, ‡∏°‡∏µ {edge_pixels} bits)")
    
    # ‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    edge_positions = np.column_stack(np.where(edges))
    for bit_idx, (i, j) in enumerate(edge_positions[:total_bits]):
        if bit_idx < total_bits:
            pixel_value = img_array[i, j, 0]
            new_value = (pixel_value & 0xFE) | int(binary_message[bit_idx])
            img_array[i, j, 0] = new_value
    
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {total_bits}")
    print(f"üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á: {total_bits} ‡∏ö‡∏¥‡∏ï")
    
    result_img = Image.fromarray(img_array)
    result_img.save(output_path)
    print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÉ‡∏ô: {output_path}")

def extract_message_pil(image_path):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏û"""
    img = Image.open(image_path).convert('RGB')
    img_array = np.array(img)
    
    gray_img = img.convert('L')
    gray_array = np.array(gray_img)
    
    def sobel_edges(gray):
        sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
        sobel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])
        grad_x = np.abs(convolve2d(gray, sobel_x, mode='same'))
        grad_y = np.abs(convolve2d(gray, sobel_y, mode='same'))
        edges = np.sqrt(grad_x**2 + grad_y**2)
        threshold = 30
        return edges > threshold
    
    try:
        edges = sobel_edges(gray_array)
        edge_positions = np.column_stack(np.where(edges))
        
        # ‡∏≠‡πà‡∏≤‡∏ô header ‡∏Å‡πà‡∏≠‡∏ô (8 bytes = 64 bits)
        header_bits = ""
        for i, j in edge_positions[:64]:
            header_bits += str(img_array[i, j, 0] & 1)
        
        # ‡πÅ‡∏õ‡∏•‡∏á header bits ‡πÄ‡∏õ‡πá‡∏ô bytes
        header_bytes = bytes(int(header_bits[i:i+8], 2) for i in range(0, 64, 8))
        message_length, expected_checksum = struct.unpack('>II', header_bytes)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        total_bits_needed = 64 + (message_length * 8)  # header + message
        binary_message = header_bits
        
        for i, j in edge_positions[64:total_bits_needed]:
            binary_message += str(img_array[i, j, 0] & 1)
        
        # ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô message
        message_binary = binary_message[64:]
        message_bytes = bytes(int(message_binary[i:i+8], 2) 
                            for i in range(0, len(message_binary), 8))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checksum
        actual_checksum = zlib.crc32(message_bytes) & 0xFFFFFFFF
        if actual_checksum != expected_checksum:
            return "<font color='red'>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢: Checksum ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô</font>"
        
        return message_bytes.decode('utf-8')
        
    except (struct.error, ValueError, UnicodeDecodeError) as e:
        return f"<font color='red'>‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}</font>"
    except Exception as e:
        return f"<font color='red'>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}</font>"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
def calculate_message_capacity(image_path, message):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏û"""
    img = Image.open(image_path).convert('RGB')
    gray_img = img.convert('L')
    gray_array = np.array(gray_img)
    
    def sobel_edges(gray):
        sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
        sobel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])
        grad_x = np.abs(convolve2d(gray, sobel_x, mode='same'))
        grad_y = np.abs(convolve2d(gray, sobel_y, mode='same'))
        edges = np.sqrt(grad_x**2 + grad_y**2)
        threshold = 30
        return edges > threshold
    
    edges = sobel_edges(gray_array)
    available_bits = np.count_nonzero(edges)
    
    message_bytes = message.encode('utf-8')
    header_size = 8  # 4 bytes length + 4 bytes checksum
    total_bytes = header_size + len(message_bytes)
    total_bits = total_bytes * 8
    
    return total_bits, available_bits

def string_to_binary(message):
    return ''.join(format(byte, '08b') for byte in message.encode('utf-8'))

def binary_to_string(binary):
    try:
        return bytes(int(binary[i:i+8], 2) for i in range(0, len(binary), 8)).decode('utf-8')
    except UnicodeDecodeError:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    






# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
image_path = r"C:\Users\65011\Desktop\Segano\work00002\photoexample\output\sfds.png"
output_path=r"C:\Users\65011\Desktop\Segano\work00002\photoexample\output\sfds_outtttt.png"
# message = "‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ miki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ü‡∏´‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Å‡∏Åmiki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏Å‡∏ß‡∏ß"
message = "‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ miki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Ådsdsds‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏îasddddddd‡∏î‡∏î‡∏î‡∏î‡∏î‡∏îddddddddd‡∏î‡∏î‡∏Å‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´‡∏´dsd‡∏Å‡∏´‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏îsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsds‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü"

# message = "‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ miki‡∏´‡∏ü‡∏Å‡∏ü‡∏Å‡∏ü‡∏Ådsdsds‡∏î‡∏î‡∏î‡∏î‡∏îdasssssss‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î‡∏î"
# hide_message_edge_detection(image_path, message, output_path)
# print(extract_message_edge_detection(output_path))


# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Å‡πà‡∏≠‡∏ô
bit_length, available_bits = calculate_message_capacity(image_path, message)
print(f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: {bit_length} bits")
print(f"‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {available_bits} bits")

# ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
hide_message_edge_detection_pil(image_path, message, output_path)

# ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
extracted_message = extract_message_pil(output_path)
print(extracted_message)