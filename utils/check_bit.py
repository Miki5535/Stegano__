
import os
from PIL import Image
import cv2
import numpy as np












def check_bit_message(message,previous_text_length,num):
    current_length = len(''.join(format(byte, '08b') for byte in message.encode('utf-8')))

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    if current_length == 0 and previous_text_length > 0:
        num += previous_text_length  # ‡πÄ‡∏û‡∏¥‡πà‡∏° num ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
    elif current_length > previous_text_length:
        num -= (current_length - previous_text_length)  # ‡∏•‡∏î num ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    elif current_length < previous_text_length:
        num += (previous_text_length - current_length)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° num ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
        

    if num < 0:
        setText=f"bit ‡πÄ‡∏Å‡∏¥‡∏ô {abs(num)}"
        setStyleSheet ="color: red; font-weight: bold; font-size: 34px; background-color: transparent;"
    else:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ
        setText=f"bit ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {abs(num)}"
        setStyleSheet ="color: green; font-weight: bold; font-size: 34px; background-color: transparent;"

    return num,setText,setStyleSheet,current_length


def check_bit_palette(image_path):
    
    img = Image.open(image_path).convert("RGB")
    temp_png_path = "temp_image.png"
    img.save(temp_png_path, format="PNG")
    # print(f"Loaded image: {image_path}, temporary PNG created at {temp_png_path}")

    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û PNG ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Palette-based
        img = Image.open(temp_png_path).convert("P")
        palette = img.getpalette()
        print(f"check_bit_palette ==> Palette size: {len(palette)}")
        
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        if os.path.exists(temp_png_path):
            os.remove(temp_png_path)
            # print(f"Temporary file {temp_png_path} removed")
    return len(palette)-16

def check_bit_lsb(image_path):
    img = Image.open(image_path).convert('RGB')  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô RGB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    arr = np.array(img)
    height, width, channels = arr.shape
    max_bits = height * width * 3  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ RGB channels (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Alpha)
    
    
    return max_bits-8


def check_bit_edge_detection(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_COLOR)
    if img is None:
        raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")

    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray_img, 100, 200)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö

    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Ç‡∏≠‡∏ö
    edge_pixels = np.count_nonzero(edges)
    return edge_pixels-64





def check_bit_alpha_channel(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)  # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏≠‡∏á Alpha
    if img is None or img.shape[2] != 4:
        # "check_bit_alpha_channel  ==> ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PNG ‡∏ó‡∏µ‡πà‡∏°‡∏µ Alpha Channel"
        return 0
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏±‡∏á‡πÑ‡∏î‡πâ
    max_bits = img.shape[0] * img.shape[1]
    print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏±‡∏á‡πÑ‡∏î‡πâ: {max_bits}")
    return max_bits-8



def check_bit_masking_filtering(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_COLOR)
    if img is None:
        raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Canny
    edges = cv2.Canny(cv2.imread(image_path, cv2.IMREAD_GRAYSCALE), 100, 200)
    edge_pixels = np.count_nonzero(edges)

    return edge_pixels-32
    















